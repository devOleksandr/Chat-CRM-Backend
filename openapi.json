{
  "openapi": "3.0.0",
  "paths": {
    "/api/auth/login": {
      "post": {
        "description": "Authenticate user with email and password, returns access and refresh tokens",
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User login credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              },
              "examples": {
                "validLogin": {
                  "summary": "Valid login credentials",
                  "value": {
                    "email": "user@example.com",
                    "password": "SecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                },
                "examples": {
                  "success": {
                    "summary": "Successful login response",
                    "value": {
                      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "user": {
                        "id": 1,
                        "email": "user@example.com",
                        "firstName": "John",
                        "lastName": "Doe",
                        "role": "Member"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data - validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "email must be an email",
                        "password should not be empty"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials - email or password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid credentials"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "User login",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/refresh": {
      "post": {
        "description": "Generate new access and refresh tokens using a valid refresh token",
        "operationId": "AuthController_refresh",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Refresh token data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              },
              "examples": {
                "validRefresh": {
                  "summary": "Valid refresh token",
                  "value": {
                    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensDto"
                },
                "examples": {
                  "success": {
                    "summary": "Successful token refresh",
                    "value": {
                      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data - validation failed"
          },
          "401": {
            "description": "Invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired refresh token"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Refresh access token",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/logout": {
      "post": {
        "description": "Logout user by clearing their refresh token from the database",
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logged out successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated - JWT token is missing or invalid"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "User logout",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/reset-password/request": {
      "post": {
        "description": "Send password reset email to user with reset link (always returns success for security)",
        "operationId": "AuthController_requestReset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Password reset request data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequestDto"
              },
              "examples": {
                "validRequest": {
                  "summary": "Valid password reset request",
                  "value": {
                    "email": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent (if email exists)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "If the email exists, a password reset link has been sent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email format"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Request password reset",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "description": "Reset user password using valid reset token from email",
        "operationId": "AuthController_resetPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Password reset data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              },
              "examples": {
                "validReset": {
                  "summary": "Valid password reset",
                  "value": {
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "newPassword": "NewSecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset successful"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid token or weak password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired reset token"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Reset password",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/register": {
      "post": {
        "description": "Register new user with email, password, and profile information",
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User registration data (Admin role creation is not allowed for security)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "firstName",
                  "lastName"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "SecurePassword123!"
                  },
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doe"
                  }
                }
              },
              "examples": {
                "validRegistration": {
                  "summary": "Valid registration data (creates Member role)",
                  "value": {
                    "email": "user@example.com",
                    "password": "SecurePassword123!",
                    "firstName": "John",
                    "lastName": "Doe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data or email already exists"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "User registration",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/users": {
      "get": {
        "operationId": "UserController_getAllUsers",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Get all users (paginated, admin only)",
        "tags": [
          "users"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "operationId": "UserController_getUserById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Get user by id (admin only)",
        "tags": [
          "users"
        ]
      },
      "patch": {
        "operationId": "UserController_updateUserByAdmin",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Update user by id (admin only)",
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "UserController_deleteUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Delete user by id with cascade deletion (admin only)",
        "tags": [
          "users"
        ]
      }
    },
    "/api/users/confirm-password-change": {
      "post": {
        "operationId": "UserController_confirmPasswordChange",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmPasswordChangeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Confirm password change with token from email",
        "tags": [
          "users"
        ]
      }
    },
    "/api/projects": {
      "post": {
        "description": "Creates a new project with the provided data. Only admins can create projects.",
        "operationId": "ProjectController_createProject",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Project creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid project data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "409": {
            "description": "Project with this unique ID already exists"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Create a new project",
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Retrieves all projects for the authenticated user with optional filtering.",
        "operationId": "ProjectController_getUserProjects",
        "parameters": [
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "uniqueId",
            "required": false,
            "in": "query",
            "description": "Filter by project unique ID",
            "schema": {
              "example": "PROJ-001",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by project name (partial match)",
            "schema": {
              "example": "Project",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Projects retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectListResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Get user projects",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/projects/{id}": {
      "get": {
        "description": "Retrieves a project by its ID. Users can only access their own projects.",
        "operationId": "ProjectController_getProjectById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Access denied to this project"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Get project by ID",
        "tags": [
          "projects"
        ]
      },
      "put": {
        "description": "Updates an existing project. Users can only update their own projects.",
        "operationId": "ProjectController_updateProject",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Project update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid project data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Access denied to this project"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Project with this unique ID already exists"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Update project",
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "description": "Deletes a project. Users can only delete their own projects.",
        "operationId": "ProjectController_deleteProject",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Access denied to this project"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Delete project",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/projects/unique/{uniqueId}": {
      "get": {
        "description": "Retrieves a project by its unique ID. Users can only access their own projects.",
        "operationId": "ProjectController_getProjectByUniqueId",
        "parameters": [
          {
            "name": "uniqueId",
            "required": true,
            "in": "path",
            "description": "Project unique ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Access denied to this project"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Get project by unique ID",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/projects/check-availability/{uniqueId}": {
      "get": {
        "description": "Checks if a project unique ID is available for use.",
        "operationId": "ProjectController_checkUniqueIdAvailability",
        "parameters": [
          {
            "name": "uniqueId",
            "required": true,
            "in": "path",
            "description": "Unique ID to check",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Availability check completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "boolean",
                      "description": "Whether the unique ID is available"
                    },
                    "uniqueId": {
                      "type": "string",
                      "description": "The unique ID that was checked"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid unique ID format"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        },
        "security": [
          {
            "access-token": []
          }
        ],
        "summary": "Check unique ID availability",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/chat": {
      "get": {
        "description": "Retrieves a paginated list of all chats where the user is either admin or participant",
        "operationId": "ChatController_getChats",
        "parameters": [
          {
            "name": "projectId",
            "required": false,
            "in": "query",
            "description": "Filter chats by project ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of chats to return (default: 20)",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of chats to skip (default: 0)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "isActive",
            "required": false,
            "in": "query",
            "description": "Filter by active status (default: true)",
            "schema": {
              "example": "true",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved chats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all chats for the authenticated user",
        "tags": [
          "chat"
        ]
      }
    },
    "/api/chat/project/{projectId}": {
      "get": {
        "description": "Retrieves a paginated list of all chats in a specific project",
        "operationId": "ChatController_getProjectChats",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the project",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "adminId",
            "required": false,
            "in": "query",
            "description": "Filter chats by admin ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "participantId",
            "required": false,
            "in": "query",
            "description": "Filter chats by participant ID",
            "schema": {
              "example": 2,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of chats to return (default: 20)",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of chats to skip (default: 0)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved project chats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all chats for a specific project",
        "tags": [
          "chat"
        ]
      }
    },
    "/api/chat/{chatId}": {
      "get": {
        "description": "Retrieves information about a specific chat",
        "operationId": "ChatController_getChatById",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "ID of the chat",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved chat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User does not have access to this chat"
          },
          "404": {
            "description": "Chat not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific chat by ID",
        "tags": [
          "chat"
        ]
      },
      "delete": {
        "description": "Deactivates a chat (soft delete)",
        "operationId": "ChatController_deactivateChat",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "ID of the chat",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deactivated chat"
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User does not have access to this chat"
          },
          "404": {
            "description": "Chat not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deactivate a chat",
        "tags": [
          "chat"
        ]
      }
    },
    "/api/chat/project/{projectId}/participant/{participantId}": {
      "post": {
        "description": "Creates a new chat or returns existing one between admin and participant",
        "operationId": "ChatController_createOrGetChat",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the project",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "participantId",
            "required": true,
            "in": "path",
            "description": "ID of the participant",
            "schema": {
              "example": 2,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved or created chat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create or get chat with participant",
        "tags": [
          "chat"
        ]
      }
    },
    "/api/chat/{chatId}/messages": {
      "get": {
        "description": "Retrieves a paginated list of messages for a specific chat",
        "operationId": "ChatController_getMessages",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "ID of the chat",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of messages to return (default: 20)",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of messages to skip (default: 0)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMessagesResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User does not have access to this chat"
          },
          "404": {
            "description": "Chat not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get messages for a chat",
        "tags": [
          "chat"
        ]
      },
      "post": {
        "description": "Creates a new message in a specific chat",
        "operationId": "ChatController_createMessage",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "ID of the chat",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageViaApiDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid message content or spam protection triggered"
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User does not have access to this chat"
          },
          "404": {
            "description": "Chat not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send a message to a chat",
        "tags": [
          "chat"
        ]
      }
    },
    "/api/chat/mobile/{chatId}/messages": {
      "get": {
        "description": "Retrieves a paginated list of messages for a specific chat. No authentication required for mobile app usage.",
        "operationId": "ChatController_getMessagesMobile",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "ID of the chat",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "participantId",
            "required": true,
            "in": "query",
            "description": "External participant ID (string) provided by mobile app",
            "schema": {
              "example": "mobile_user_123",
              "type": "string"
            }
          },
          {
            "name": "projectUniqueId",
            "required": true,
            "in": "query",
            "description": "Unique ID of the project",
            "schema": {
              "example": "PROJ-001",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of messages to return (default: 20)",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of messages to skip (default: 0)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMessagesResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Chat not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get messages for a chat (Mobile App)",
        "tags": [
          "chat"
        ]
      },
      "post": {
        "description": "Creates a new message in a specific chat. No authentication required for mobile app usage.",
        "operationId": "ChatController_createMessageMobile",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "ID of the chat",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "participantId",
            "required": true,
            "in": "query",
            "description": "External participant ID (string) provided by mobile app",
            "schema": {
              "example": "mobile_user_123",
              "type": "string"
            }
          },
          {
            "name": "projectUniqueId",
            "required": true,
            "in": "query",
            "description": "Unique ID of the project",
            "schema": {
              "example": "PROJ-001",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageViaApiDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid message content or spam protection triggered"
          },
          "404": {
            "description": "Chat not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send a message to a chat (Mobile App)",
        "tags": [
          "chat"
        ]
      }
    },
    "/api/chat/{chatId}/read": {
      "put": {
        "description": "Marks all messages in a chat as read for the authenticated user",
        "operationId": "ChatController_markChatAsRead",
        "parameters": [
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "ID of the chat",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully marked chat as read"
          },
          "401": {
            "description": "User is not authenticated"
          },
          "403": {
            "description": "User does not have access to this chat"
          },
          "404": {
            "description": "Chat not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mark chat as read",
        "tags": [
          "chat"
        ]
      }
    },
    "/api/chat/status": {
      "get": {
        "description": "Retrieves the online status of the authenticated user",
        "operationId": "ChatController_getCurrentUserOnlineStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved online status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isOnline": {
                      "type": "boolean",
                      "example": true
                    },
                    "lastSeen": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-01-15T10:00:00.000Z",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user online status",
        "tags": [
          "chat"
        ]
      }
    },
    "/api/chat/mobile/project/{projectUniqueId}/participant/{participantId}": {
      "post": {
        "description": "Gets or creates a chat between admin and participant. No authentication required for mobile app usage.",
        "operationId": "ChatController_createOrGetChatMobile",
        "parameters": [
          {
            "name": "projectUniqueId",
            "required": true,
            "in": "path",
            "description": "Unique ID of the project",
            "schema": {
              "example": "PROJ-001",
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "required": true,
            "in": "path",
            "description": "External participant ID (string) provided by mobile app",
            "schema": {
              "example": "mobile_user_123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved or created chat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid project or participant data"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get or create chat (Mobile App)",
        "tags": [
          "chat"
        ]
      }
    },
    "/api/project-participants/mobile": {
      "post": {
        "description": "Creates a new participant for a specific project with external participant ID. No authentication required for mobile app usage.",
        "operationId": "ProjectParticipantController_createParticipantMobile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectParticipantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created participant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectParticipantResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid participant data or participant ID already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new project participant (Mobile App)",
        "tags": [
          "project-participants"
        ]
      }
    },
    "/api/project-participants": {
      "post": {
        "description": "Creates a new participant for a specific project. Admin authentication required.",
        "operationId": "ProjectParticipantController_createParticipant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectParticipantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created participant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectParticipantResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid participant data or participant ID already exists"
          },
          "401": {
            "description": "User is not authenticated"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new project participant (Admin)",
        "tags": [
          "project-participants"
        ]
      }
    },
    "/api/project-participants/project/{projectId}": {
      "get": {
        "description": "Retrieves a paginated list of all participants for a specific project",
        "operationId": "ProjectParticipantController_getProjectParticipants",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the project",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of participants to return (default: 20)",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of participants to skip (default: 0)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved participants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectParticipantResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all participants for a project",
        "tags": [
          "project-participants"
        ]
      }
    },
    "/api/project-participants/{participantId}": {
      "get": {
        "description": "Retrieves information about a specific project participant",
        "operationId": "ProjectParticipantController_getParticipantById",
        "parameters": [
          {
            "name": "participantId",
            "required": true,
            "in": "path",
            "description": "ID of the participant",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved participant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectParticipantResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "404": {
            "description": "Participant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get participant by ID",
        "tags": [
          "project-participants"
        ]
      },
      "delete": {
        "description": "Removes a participant from a project",
        "operationId": "ProjectParticipantController_deleteParticipant",
        "parameters": [
          {
            "name": "participantId",
            "required": true,
            "in": "path",
            "description": "ID of the participant to delete",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted participant"
          },
          "401": {
            "description": "User is not authenticated"
          },
          "404": {
            "description": "Participant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete project participant",
        "tags": [
          "project-participants"
        ]
      }
    }
  },
  "info": {
    "title": "Chat CRM API",
    "description": "API documentation for Chat CRM application",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "users",
      "description": "User management endpoints"
    },
    {
      "name": "projects",
      "description": "Project management endpoints"
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "access-token": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "Authorization",
        "description": "Enter JWT token",
        "in": "header"
      }
    },
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Admin email address",
            "example": "admin@chat-crm.com"
          },
          "password": {
            "type": "string",
            "description": "Admin password",
            "example": "admin123",
            "minLength": 6
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "role": {
            "type": "string",
            "example": "Admin",
            "enum": [
              "Admin",
              "Participant"
            ]
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "lastName",
          "role"
        ]
      },
      "LoginResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "example": "access.jwt.token"
          },
          "refreshToken": {
            "type": "string",
            "example": "refresh.jwt.token"
          },
          "user": {
            "$ref": "#/components/schemas/LoginUserDto"
          }
        },
        "required": [
          "accessToken",
          "refreshToken",
          "user"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "TokensDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "description": "JWT access token"
          },
          "refreshToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "description": "JWT refresh token"
          }
        },
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "ResetPasswordRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Admin email for password reset",
            "example": "admin@chat-crm.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Password reset token"
          },
          "newPassword": {
            "type": "string",
            "description": "New password",
            "minLength": 6,
            "example": "newpass123"
          }
        },
        "required": [
          "token",
          "newPassword"
        ]
      },
      "UserResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "User ID",
            "example": 1
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "Admin"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "User"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "admin@chat-crm.com"
          },
          "role": {
            "type": "string",
            "description": "User role (always Admin)",
            "enum": [
              "Admin",
              "Participant"
            ],
            "example": "Admin"
          },
          "createdAt": {
            "type": "string",
            "description": "User creation date",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "User last update date",
            "example": "2023-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "email",
          "role",
          "createdAt",
          "updatedAt"
        ]
      },
      "AdminUpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "Admin"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "User"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "admin@chat-crm.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "admin123",
            "minLength": 6
          },
          "role": {
            "type": "string",
            "description": "User role (always Admin)",
            "enum": [
              "Admin",
              "Participant"
            ],
            "example": "Admin"
          }
        }
      },
      "ConfirmPasswordChangeDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Password change confirmation token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "token"
        ]
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "My Awesome Project",
            "minLength": 1,
            "maxLength": 255
          },
          "uniqueId": {
            "type": "string",
            "description": "Unique project ID assigned by admin",
            "example": "PROJ-001",
            "minLength": 3,
            "maxLength": 50
          }
        },
        "required": [
          "name",
          "uniqueId"
        ]
      },
      "ProjectResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Project ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "My Awesome Project"
          },
          "uniqueId": {
            "type": "string",
            "description": "Unique project ID assigned by admin",
            "example": "PROJ-001"
          },
          "createdBy": {
            "description": "User who created the project",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponseDto"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "Project creation date",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Project last update date",
            "example": "2023-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "uniqueId",
          "createdBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProjectListResponseDto": {
        "type": "object",
        "properties": {
          "projects": {
            "description": "Array of projects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of projects",
            "example": 10
          },
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Number of projects per page",
            "example": 10
          }
        },
        "required": [
          "projects",
          "total",
          "page",
          "limit"
        ]
      },
      "UpdateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "Updated Project Name",
            "minLength": 1,
            "maxLength": 255
          },
          "uniqueId": {
            "type": "string",
            "description": "Unique project ID assigned by admin",
            "example": "PROJ-002",
            "minLength": 3,
            "maxLength": 50
          }
        }
      },
      "ProjectDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Project ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "My Project"
          },
          "uniqueId": {
            "type": "string",
            "description": "Project unique ID",
            "example": "proj123"
          }
        },
        "required": [
          "id",
          "name",
          "uniqueId"
        ]
      },
      "ChatParticipantDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "User ID",
            "example": 1
          },
          "email": {
            "type": "object",
            "description": "User email (optional for participants)",
            "example": "user@example.com",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          },
          "uniqueId": {
            "type": "string",
            "description": "User unique ID (for participants)",
            "example": "user123"
          },
          "isOnline": {
            "type": "boolean",
            "description": "Whether the user is online",
            "example": false
          },
          "lastSeen": {
            "type": "object",
            "description": "Last seen timestamp",
            "example": "2025-01-15T10:00:00.000Z",
            "nullable": true
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "lastName",
          "isOnline",
          "lastSeen"
        ]
      },
      "LastMessageDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Message ID",
            "example": 1
          },
          "content": {
            "type": "string",
            "description": "Message content",
            "example": "Hello! How can I help you?"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Message creation timestamp",
            "example": "2025-01-15T10:30:00.000Z"
          },
          "senderId": {
            "type": "number",
            "description": "ID of the user who sent the message",
            "example": 1
          }
        },
        "required": [
          "id",
          "content",
          "createdAt",
          "senderId"
        ]
      },
      "ChatResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Chat ID",
            "example": 1
          },
          "projectId": {
            "type": "number",
            "description": "Project ID",
            "example": 1
          },
          "project": {
            "description": "Project information",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectDto"
              }
            ]
          },
          "admin": {
            "description": "Admin user information",
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatParticipantDto"
              }
            ]
          },
          "participant": {
            "description": "Participant user information",
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatParticipantDto"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Chat creation timestamp",
            "example": "2025-01-15T10:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Chat last update timestamp",
            "example": "2025-01-15T10:30:00.000Z"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the chat is active",
            "example": true
          },
          "lastMessage": {
            "description": "Last message in the chat",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastMessageDto"
              }
            ]
          },
          "unreadCount": {
            "type": "number",
            "description": "Number of unread messages for the requesting user",
            "example": 3
          },
          "lastMessageAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the last message",
            "example": "2025-01-15T10:30:00.000Z"
          }
        },
        "required": [
          "id",
          "projectId",
          "project",
          "admin",
          "participant",
          "createdAt",
          "updatedAt",
          "isActive",
          "unreadCount"
        ]
      },
      "MessageSenderDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "User ID",
            "example": 1
          },
          "email": {
            "type": "object",
            "description": "User email",
            "example": "user@example.com",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          },
          "uniqueId": {
            "type": "string",
            "description": "User unique identifier (for participants)",
            "example": "user123"
          },
          "isOnline": {
            "type": "boolean",
            "description": "Whether the user is currently online",
            "example": true
          },
          "lastSeen": {
            "type": "object",
            "description": "Last time the user was seen",
            "example": "2025-01-15T10:30:00.000Z",
            "nullable": true
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "lastName",
          "isOnline"
        ]
      },
      "MessageResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Message ID",
            "example": 1
          },
          "chatId": {
            "type": "number",
            "description": "Chat ID where the message belongs",
            "example": 1
          },
          "senderId": {
            "type": "number",
            "description": "ID of the user who sent the message",
            "example": 1
          },
          "content": {
            "type": "string",
            "description": "Message content",
            "example": "Hello! How can I help you today?"
          },
          "type": {
            "type": "string",
            "description": "Type of the message. IMAGE for image files, FILE for other files, TEXT for text messages",
            "enum": [
              "TEXT",
              "EMOJI",
              "FILE",
              "IMAGE",
              "SYSTEM"
            ],
            "example": "TEXT"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the message",
            "example": {
              "fileUrl": "https://storage.googleapis.com/bucket/chat/1/uuid.jpg",
              "fileName": "image.jpg",
              "fileSize": 1024000,
              "mimeType": "image/jpeg",
              "originalName": "photo.jpg"
            }
          },
          "read": {
            "type": "boolean",
            "description": "Whether the message has been read",
            "example": false
          },
          "readAt": {
            "type": "object",
            "description": "Timestamp when the message was read",
            "example": "2025-01-15T10:35:00.000Z",
            "nullable": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Message creation timestamp",
            "example": "2025-01-15T10:30:00.000Z"
          },
          "sender": {
            "description": "Information about the message sender",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageSenderDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "chatId",
          "senderId",
          "content",
          "type",
          "read",
          "createdAt",
          "sender"
        ]
      },
      "PaginatedMessagesResponseDto": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "Array of messages",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageResponseDto"
            }
          },
          "totalCount": {
            "type": "number",
            "description": "Total number of messages in the chat",
            "example": 50
          },
          "limit": {
            "type": "number",
            "description": "Number of messages per page",
            "example": 20
          },
          "offset": {
            "type": "number",
            "description": "Number of messages skipped",
            "example": 0
          }
        },
        "required": [
          "messages",
          "totalCount",
          "limit",
          "offset"
        ]
      },
      "CreateMessageViaApiDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Content of the message",
            "example": "Hello! How can I help you today?",
            "maxLength": 1000
          },
          "type": {
            "type": "string",
            "description": "Type of the message. Use IMAGE for image files, FILE for other files, TEXT for text messages",
            "enum": [
              "TEXT",
              "EMOJI",
              "FILE",
              "IMAGE",
              "SYSTEM"
            ],
            "example": "TEXT",
            "default": "TEXT"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the message (e.g., file info, emoji data)",
            "example": {
              "fileUrl": "https://storage.googleapis.com/bucket/chat/1/uuid.jpg",
              "fileName": "image.jpg",
              "fileSize": 1024000,
              "mimeType": "image/jpeg",
              "originalName": "photo.jpg"
            }
          }
        },
        "required": [
          "content"
        ]
      },
      "CreateProjectParticipantDto": {
        "type": "object",
        "properties": {
          "projectUniqueId": {
            "type": "string",
            "description": "Unique ID of the project where the participant will be added",
            "example": "PROJ-001",
            "minLength": 3,
            "maxLength": 50
          },
          "participantId": {
            "type": "string",
            "description": "External participant ID provided by mobile app",
            "example": "mobile_user_123",
            "minLength": 3,
            "maxLength": 50
          },
          "firstName": {
            "type": "string",
            "description": "First name of the participant (optional for mobile app)",
            "example": "John",
            "maxLength": 50
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the participant (optional for mobile app)",
            "example": "Doe",
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "description": "Email address of the participant (optional for mobile app)",
            "example": "john.doe@example.com"
          }
        },
        "required": [
          "projectUniqueId",
          "participantId"
        ]
      },
      "ProjectParticipantResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Participant ID",
            "example": 1
          },
          "projectId": {
            "type": "number",
            "description": "Project ID",
            "example": 1
          },
          "userId": {
            "type": "number",
            "description": "User ID",
            "example": 2
          },
          "participantId": {
            "type": "string",
            "description": "External participant ID provided by mobile app",
            "example": "mobile_user_123"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the participant",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the participant",
            "example": "Doe"
          },
          "email": {
            "type": "object",
            "description": "Email address of the participant (optional)",
            "example": "john.doe@example.com",
            "nullable": true
          },
          "isOnline": {
            "type": "boolean",
            "description": "Whether the participant is online",
            "example": false
          },
          "lastSeen": {
            "type": "object",
            "description": "Last seen timestamp",
            "example": "2025-01-15T10:00:00.000Z",
            "nullable": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the participant was added to the project",
            "example": "2025-01-15T10:00:00.000Z"
          }
        },
        "required": [
          "id",
          "projectId",
          "userId",
          "participantId",
          "firstName",
          "lastName",
          "email",
          "isOnline",
          "lastSeen",
          "createdAt"
        ]
      }
    }
  }
}