import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { PushProviderPort } from '../ports/push-provider.port';
import { Expo, ExpoPushMessage } from 'expo-server-sdk';

@Injectable()
export class ExpoPushProvider extends PushProviderPort {
  private readonly logger = new Logger(ExpoPushProvider.name);
  private readonly expo: Expo;
  private readonly projectId: string | undefined;

  constructor(private readonly configService: ConfigService) {
    super();
    
    // –û—Ç—Ä–∏–º—É—î–º–æ Expo –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    const accessToken = this.configService.get<string>('expo.accessToken');
    this.projectId = this.configService.get<string>('expo.projectId');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ Expo –∫–ª—ñ—î–Ω—Ç –∑ access token —è–∫—â–æ –≤—ñ–Ω —î
    if (accessToken) {
      this.expo = new Expo({ accessToken });
      this.logger.log('‚úÖ Expo Push Provider initialized with access token');
    } else {
      this.expo = new Expo();
      this.logger.warn('‚ö†Ô∏è Expo Push Provider initialized without access token (public project)');
    }
    
    if (!this.projectId) {
      this.logger.warn('‚ö†Ô∏è EXPO_PUBLIC_PROJECT_ID not configured');
    } else {
      this.logger.log(`‚úÖ Expo Project ID: ${this.projectId}`);
    }
  }

  async sendToTokens(params: {
    tokens: string[];
    notification: { title: string; body: string };
    data?: Record<string, string>;
  }): Promise<{ success: string[]; invalid: string[]; failed: string[] }> {
    const { tokens, notification, data } = params;
    
    if (!tokens.length) {
      return { success: [], invalid: [], failed: [] };
    }

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ Expo push tokens
    const validTokens = tokens.filter(token => Expo.isExpoPushToken(token));
    const invalidTokens = tokens.filter(token => !Expo.isExpoPushToken(token));

    if (invalidTokens.length > 0) {
      this.logger.warn(`Found ${invalidTokens.length} invalid Expo push tokens`);
    }

    if (!validTokens.length) {
      return { 
        success: [], 
        invalid: invalidTokens, 
        failed: [] 
      };
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    const messages: ExpoPushMessage[] = validTokens.map(token => ({
      to: token,
      sound: 'default',
      title: notification.title,
      body: notification.body,
      data: {
        ...data,
        projectId: this.projectId, // –î–æ–¥–∞—î–º–æ project ID –¥–æ –¥–∞–Ω–∏—Ö
        timestamp: new Date().toISOString(),
      },
      priority: 'high',
    }));

    // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è batch size
    const batchSize = this.configService.get<number>('expo.pushSettings.batchSize') || 100;
    
    // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞–Ω–∫–∏ (Expo SDK –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î batch size)
    const chunks = this.expo.chunkPushNotifications(messages);
    const success: string[] = [];
    const failed: string[] = [];

    this.logger.log(`üì± Sending ${validTokens.length} push notifications in ${chunks.length} chunks`);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–µ–Ω —á–∞–Ω–∫
    for (const chunk of chunks) {
      try {
        const ticketChunk = await this.expo.sendPushNotificationsAsync(chunk);
        
        // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        ticketChunk.forEach((ticket, index) => {
          const chunkIndex = chunks.indexOf(chunk);
          const tokenIndex = chunkIndex * batchSize + index;
          const token = validTokens[tokenIndex];
          
          if (ticket.status === 'ok') {
            success.push(token);
            this.logger.log(`‚úÖ Push notification sent successfully to token: ${token.substring(0, 20)}...`);
          } else {
            failed.push(token);
            this.logger.error(`‚ùå Failed to send push notification to token: ${token.substring(0, 20)}...`, ticket);
          }
        });
      } catch (error) {
        this.logger.error(`‚ùå Error sending push notifications chunk: ${error.message}`);
        // –î–æ–¥–∞—î–º–æ –≤—Å—ñ —Ç–æ–∫–µ–Ω–∏ –∑ —Ü—å–æ–≥–æ —á–∞–Ω–∫—É –¥–æ failed
        const chunkTokens = chunk.map(msg => msg.to as string);
        failed.push(...chunkTokens);
      }
    }

    this.logger.log(`üì± Push notifications sent: ${success.length} success, ${failed.length} failed, ${invalidTokens.length} invalid`);

    return {
      success,
      invalid: invalidTokens,
      failed,
    };
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ push-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
   */
  async sendToUser(userId: number, notification: { title: string; body: string }, data?: Record<string, string>): Promise<void> {
    this.logger.log(`üì± Sending push notification to user ${userId}: ${notification.title}`);
    // –¶–µ–π –º–µ—Ç–æ–¥ –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ NotificationRepository
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ push-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç
   */
  async sendChatNotification(params: {
    recipientUserId: number;
    chatId: number;
    messageId: number;
    projectId: number;
    preview: string;
    senderName: string;
    senderId: number;
  }): Promise<void> {
    const { recipientUserId, chatId, messageId, projectId, preview, senderName, senderId } = params;
    
    this.logger.log(`üì± Sending chat push notification to user ${recipientUserId} in chat ${chatId}`);
    
    // –¶–µ–π –º–µ—Ç–æ–¥ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ PushNotificationsService
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
   */
  getConfigStatus(): { projectId: string | undefined; hasAccessToken: boolean; isConfigured: boolean } {
    const accessToken = this.configService.get<string>('expo.accessToken');
    
    return {
      projectId: this.projectId,
      hasAccessToken: !!accessToken,
      isConfigured: !!this.projectId,
    };
  }
}
