name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ========================================
  # BUILD AND TEST
  # ========================================
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm run test
      
    - name: Build application
      run: npm run build
      
    - name: Security audit
      run: npm audit --audit-level=moderate
      
    - name: Build Docker image
      run: docker build -f Dockerfile.prod -t $IMAGE_NAME:${{ github.sha }} .
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          build-info.json
        retention-days: 30

  # ========================================
  # DOCKER IMAGE
  # ========================================
  docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ========================================
  # DEPLOY TO STAGING
  # ========================================
  deploy-staging:
    needs: [build-and-test, docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply, docker-compose, etc.
        
    - name: Health check
      run: |
        echo "üè• Running health check..."
        # Add your health check logic here
        # Example: curl -f http://staging-url/health

  # ========================================
  # DEPLOY TO PRODUCTION
  # ========================================
  deploy-production:
    needs: [build-and-test, docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply, docker-compose, etc.
        
    - name: Health check
      run: |
        echo "üè• Running health check..."
        # Add your health check logic here
        # Example: curl -f http://production-url/health
        
    - name: Notify deployment
      run: |
        echo "üì¢ Production deployment completed!"
        # Add your notification logic here
        # Example: Slack, Discord, email, etc.

  # ========================================
  # COOLIFY DEPLOYMENT
  # ========================================
  deploy-coolify:
    needs: [build-and-test, docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: coolify
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Coolify CLI
      run: |
        echo "üîß Setting up Coolify deployment..."
        # Add Coolify CLI setup if available
        
    - name: Deploy to Coolify
      run: |
        echo "‚òÅÔ∏è Deploying to Coolify..."
        # Add your Coolify deployment logic here
        # This could be via Coolify API, CLI, or webhook
        
    - name: Verify deployment
      run: |
        echo "‚úÖ Verifying Coolify deployment..."
        # Add verification logic here

  # ========================================
  # NOTIFICATIONS
  # ========================================
  notify:
    needs: [build-and-test, docker]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: success()
      run: |
        echo "üéâ CI/CD pipeline completed successfully!"
        # Add success notification logic here
        
    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå CI/CD pipeline failed!"
        # Add failure notification logic here
